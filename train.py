# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QF3tSBXy_AMeDxiBF5qLC6mWZrlfdkvs
"""

import numpy as np
import matplotlib.pyplot as plt
import PIL
from skimage.feature import local_binary_pattern, greycomatrix, greycoprops
from skimage.filters import gabor
import os
import cv2

DATADIR = "C:/Users/gauri/Be proj"
CATEGORIES = ["Not_Retinoblastoma", "Retinoblastoma"]

for category in CATEGORIES:
    path = os.path.join(DATADIR, category)
    for img in os.listdir(path):
        img_array = cv2.imread(os.path.join(path, img))
        b,img_array,r = cv2.split(img_array)
        #gray = cv2.imread(r, cv2.COLOR_BGR2HSV)  #gray image
        #print(img_array)
        img_array = cv2.GaussianBlur(img_array,(5,5),0)
        kernel = np.ones((5,5),np.uint8)
        erosion = cv2.erode(img_array, kernel, iterations = 1)
        img_array = cv2.bitwise_not(img_array)
        img_array = cv2.medianBlur(img_array,3)
        #img_array = cv2.cvtColor(img_array, cv2.COLOR_BGR2GRAY)
        ret, img_array = cv2.threshold(img_array, 127, 255, cv2.THRESH_BINARY)
        #kernel = np.ones((5,5),np.float32)/25
        #dst = cv2.filter2D(img,-1,kernel)
        #ret, img_array = cv2.threshold(img_array, 127, 255, cv2.THRESH_BINARY)
        plt.imshow(img_array, cmap="gray")
        plt.show()

print(img_array.shape)

IMG_SIZE = 1000

new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
plt.imshow(new_array, cmap = "gray")
plt.show()

training_data = []

def create_training_data():
    for category in CATEGORIES:
        path = os.path.join(DATADIR, category)
        class_num = CATEGORIES.index(category)
        for img in os.listdir(path):
            try:
                img_array = cv2.imread(os.path.join(path, img))
                img_array = cv2.medianBlur(img_array,3)
                img_array = cv2.cvtColor(img_array, cv2.COLOR_BGR2GRAY)
                ret, img_array = cv2.threshold(img_array, 127, 255, cv2.THRESH_BINARY_INV)
                img_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
                training_data.append([img_array, class_num])
            except Exception as e:
                pass

create_training_data()

print(len(training_data))

import random

random.shuffle(training_data)

for sample in training_data[:10]:
    print(sample[1])

X = []
y = []

for features, label in training_data:
    X.append(features)
    y.append(label)

X = np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 1)

import pickle

pickle_out = open("X2.pickle", "wb")
pickle.dump(X, pickle_out)
pickle_out.close()

pickle_out = open("y2.pickle", "wb")
pickle.dump(y, pickle_out)
pickle_out.close()

import pickle

pickle_in = open("X2.pickle", "rb")
X = pickle.load(pickle_in)

X[1]



